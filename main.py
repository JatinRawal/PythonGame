# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3

from sqlalchemy import true

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(885, 707)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(85, 170, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 75 12pt \"Comic Sans MS\";\n"
"")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.players_stats = QtWidgets.QHBoxLayout()
        self.players_stats.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.players_stats.setSpacing(10)
        self.players_stats.setObjectName("players_stats")
        self.players = QtWidgets.QHBoxLayout()
        self.players.setObjectName("players")
        self.bat_lbl = QtWidgets.QLabel(self.centralwidget)
        self.bat_lbl.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bat_lbl.sizePolicy().hasHeightForWidth())
        self.bat_lbl.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.bat_lbl.setFont(font)
        self.bat_lbl.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 75 12pt \"Times New Roman\";\n"
"background-color: rgb(85, 170, 255);")
        self.bat_lbl.setObjectName("bat_lbl")
        self.players.addWidget(self.bat_lbl)
        self.batsman_cnt = QtWidgets.QLineEdit(self.centralwidget)
        self.batsman_cnt.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.batsman_cnt.sizePolicy().hasHeightForWidth())
        self.batsman_cnt.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.batsman_cnt.setFont(font)
        self.batsman_cnt.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 75 12pt \"Times New Roman\";")
        self.batsman_cnt.setAlignment(QtCore.Qt.AlignCenter)
        self.batsman_cnt.setObjectName("batsman_cnt")
        self.players.addWidget(self.batsman_cnt)
        self.bowl_lbl = QtWidgets.QLabel(self.centralwidget)
        self.bowl_lbl.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bowl_lbl.sizePolicy().hasHeightForWidth())
        self.bowl_lbl.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.bowl_lbl.setFont(font)
        self.bowl_lbl.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 75 12pt \"Times New Roman\";\n"
"background-color: rgb(85, 170, 255);")
        self.bowl_lbl.setObjectName("bowl_lbl")
        self.players.addWidget(self.bowl_lbl)
        self.bowler_cnt = QtWidgets.QLineEdit(self.centralwidget)
        self.bowler_cnt.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bowler_cnt.sizePolicy().hasHeightForWidth())
        self.bowler_cnt.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.bowler_cnt.setFont(font)
        self.bowler_cnt.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 75 12pt \"Times New Roman\";")
        self.bowler_cnt.setAlignment(QtCore.Qt.AlignCenter)
        self.bowler_cnt.setObjectName("bowler_cnt")
        self.players.addWidget(self.bowler_cnt)
        self.all_lbl = QtWidgets.QLabel(self.centralwidget)
        self.all_lbl.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.all_lbl.sizePolicy().hasHeightForWidth())
        self.all_lbl.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.all_lbl.setFont(font)
        self.all_lbl.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 75 12pt \"Times New Roman\";\n"
"background-color: rgb(85, 170, 255);")
        self.all_lbl.setObjectName("all_lbl")
        self.players.addWidget(self.all_lbl)
        self.all_cnt = QtWidgets.QLineEdit(self.centralwidget)
        self.all_cnt.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.all_cnt.sizePolicy().hasHeightForWidth())
        self.all_cnt.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.all_cnt.setFont(font)
        self.all_cnt.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 75 12pt \"Times New Roman\";")
        self.all_cnt.setAlignment(QtCore.Qt.AlignCenter)
        self.all_cnt.setObjectName("all_cnt")
        self.players.addWidget(self.all_cnt)
        self.wk_lbl = QtWidgets.QLabel(self.centralwidget)
        self.wk_lbl.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.wk_lbl.sizePolicy().hasHeightForWidth())
        self.wk_lbl.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.wk_lbl.setFont(font)
        self.wk_lbl.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 75 14pt \"Times New Roman\";\n"
"background-color: rgb(85, 170, 255);")
        self.wk_lbl.setObjectName("wk_lbl")
        self.players.addWidget(self.wk_lbl)
        self.wk_cnt = QtWidgets.QLineEdit(self.centralwidget)
        self.wk_cnt.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.wk_cnt.sizePolicy().hasHeightForWidth())
        self.wk_cnt.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.wk_cnt.setFont(font)
        self.wk_cnt.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 75 12pt \"Times New Roman\";")
        self.wk_cnt.setAlignment(QtCore.Qt.AlignCenter)
        self.wk_cnt.setObjectName("wk_cnt")
        self.players.addWidget(self.wk_cnt)
        self.players_stats.addLayout(self.players)
        self.verticalLayout.addLayout(self.players_stats)
        self.main = QtWidgets.QHBoxLayout()
        self.main.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.main.setSpacing(30)
        self.main.setObjectName("main")
        self.avail_player = QtWidgets.QVBoxLayout()
        self.avail_player.setSpacing(5)
        self.avail_player.setObjectName("avail_player")
        self.type_lbl = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.type_lbl.setFont(font)
        self.type_lbl.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.type_lbl.setStyleSheet("background-color: rgb(85, 170, 255);\n"
"font: 75 14pt \"Times New Roman\";\n"
"\n"
"")
        self.type_lbl.setLineWidth(1)
        self.type_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.type_lbl.setObjectName("type_lbl")
        self.avail_player.addWidget(self.type_lbl)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.groupBox.setTitle("")
        self.groupBox.setFlat(False)
        self.groupBox.setCheckable(False)
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout_4.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.horizontalLayout_4.setContentsMargins(-1, 0, -1, 1)
        self.horizontalLayout_4.setSpacing(20)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.bat_btn = QtWidgets.QRadioButton(self.groupBox)
        self.bat_btn.setObjectName("bat_btn")
        self.horizontalLayout_4.addWidget(self.bat_btn)
        self.bat_btn.toggled.connect(self.showlist)
        self.bowl_btn = QtWidgets.QRadioButton(self.groupBox)
        self.bowl_btn.setObjectName("bowl_btn")
        self.horizontalLayout_4.addWidget(self.bowl_btn)
        self.bowl_btn.toggled.connect(self.showlist)
        self.all_btn = QtWidgets.QRadioButton(self.groupBox)
        self.all_btn.setObjectName("all_btn")
        self.horizontalLayout_4.addWidget(self.all_btn)
        self.all_btn.toggled.connect(self.showlist)
        self.wk_btn = QtWidgets.QRadioButton(self.groupBox)
        self.wk_btn.setObjectName("wk_btn")
        self.horizontalLayout_4.addWidget(self.wk_btn)
        self.wk_btn.toggled.connect(self.showlist)
        self.avail_player.addWidget(self.groupBox)
        self.avail_points = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.avail_points.setFont(font)
        self.avail_points.setStyleSheet("background-color: rgb(85, 170, 255);\n"
"font: 75 14pt \"Times New Roman\";\n"
"\n"
"")
        self.avail_points.setObjectName("avail_points")
        self.avail_player.addWidget(self.avail_points)
        self.players_list = QtWidgets.QListWidget(self.centralwidget)
        self.players_list.setStyleSheet("font: 75 12pt \"Times New Roman\";")
        self.players_list.setObjectName("players_list")
        self.avail_player.addWidget(self.players_list)
        self.avail_total = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.avail_total.setFont(font)
        self.avail_total.setStyleSheet("font: 75 12pt \"Times New Roman\";")
        self.avail_total.setText("")
        self.avail_total.setAlignment(QtCore.Qt.AlignCenter)
        self.avail_total.setObjectName("avail_total")
        self.avail_player.addWidget(self.avail_total)
        self.main.addLayout(self.avail_player)
        self.selected_player = QtWidgets.QVBoxLayout()
        self.selected_player.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.selected_player.setSpacing(6)
        self.selected_player.setObjectName("selected_player")
        self.selected_lbl = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.selected_lbl.setFont(font)
        self.selected_lbl.setStyleSheet("background-color: rgb(85, 170, 255);\n"
"font: 75 14pt \"Times New Roman\";\n"
"\n"
"")
        self.selected_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.selected_lbl.setObjectName("selected_lbl")
        self.selected_player.addWidget(self.selected_lbl)
        self.team_lbl = QtWidgets.QLabel(self.centralwidget)
        self.team_lbl.setEnabled(True)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.team_lbl.setFont(font)
        self.team_lbl.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"font: 75 14pt \"Times New Roman\";")
        self.team_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.team_lbl.setObjectName("team_lbl")
        self.selected_player.addWidget(self.team_lbl)
        self.used_points = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.used_points.setFont(font)
        self.used_points.setStyleSheet("background-color: rgb(85, 170, 255);\n"
"font: 75 14pt \"Times New Roman\";\n"
"\n"
"")
        self.used_points.setObjectName("used_points")
        self.selected_player.addWidget(self.used_points)
        self.selected_list = QtWidgets.QListWidget(self.centralwidget)
        self.selected_list.setStyleSheet("font: 75 12pt \"Times New Roman\";")
        self.selected_list.setObjectName("selected_list")
        self.selected_player.addWidget(self.selected_list)
        self.players_list.itemDoubleClicked.connect(self.removeplayers_list)
        self.selected_list.itemDoubleClicked.connect(self.removeselected_list)
        self.used_total = QtWidgets.QLabel(self.centralwidget)
        self.used_total.setStyleSheet("font: 75 12pt \"Times New Roman\";")
        self.used_total.setText("")
        self.used_total.setPixmap(QtGui.QPixmap("../Training Internshala/New folder/dream1.png"))
        self.used_total.setObjectName("used_total")
        self.selected_player.addWidget(self.used_total)
        self.main.addLayout(self.selected_player)
        self.verticalLayout.addLayout(self.main)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 885, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.team_new = QtWidgets.QAction(MainWindow)
        self.team_new.setObjectName("team_new")
        self.team_open = QtWidgets.QAction(MainWindow)
        self.team_open.setObjectName("team_open")
        self.team_save = QtWidgets.QAction(MainWindow)
        self.team_save.setObjectName("team_save")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.team_evaluate = QtWidgets.QAction(MainWindow)
        self.team_evaluate.setObjectName("team_evaluate")
        self.menuFile.addAction(self.team_new)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.team_open)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.team_save)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.team_evaluate)
        self.menuFile.addSeparator()
        self.bat = 0
        self.bwl = 0
        self.ar = 0
        self.wk = 0
        self.avl = 1000
        self.avlbuffer = 0
        self.used = 0
        self.menubar.addAction(self.menuFile.menuAction())
        self.menuFile.triggered[QtWidgets.QAction].connect(self.menufunction)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket Game"))
        self.bat_lbl.setText(_translate("MainWindow", " Batsmen(BAT)"))
        self.batsman_cnt.setText(_translate("MainWindow", "0"))
        self.bowl_lbl.setText(_translate("MainWindow", " Bowlers(BOWL)"))
        self.bowler_cnt.setText(_translate("MainWindow", "0"))
        self.all_lbl.setText(_translate("MainWindow", " All Rounders(AR) "))
        self.all_cnt.setText(_translate("MainWindow", "0"))
        self.wk_lbl.setText(_translate("MainWindow", "Wicketkeeper(WK)"))
        self.wk_cnt.setText(_translate("MainWindow", "0"))
        self.type_lbl.setText(_translate("MainWindow", "Player Categories"))
        self.bat_btn.setStyleSheet(_translate("MainWindow", "background-color: rgb(255, 255, 255);\n"
"font: 75 14pt \"Times New Roman\";"))
        self.bat_btn.setText(_translate("MainWindow", "BAT"))
        self.bowl_btn.setStyleSheet(_translate("MainWindow", "background-color: rgb(255, 255, 255);\n"
"font: 75 14pt \"Times New Roman\";"))
        self.bowl_btn.setText(_translate("MainWindow", "BOWL"))
        self.all_btn.setStyleSheet(_translate("MainWindow", "background-color: rgb(255, 255, 255);\n"
"font: 75 14pt \"Times New Roman\";"))
        self.all_btn.setText(_translate("MainWindow", "AR"))
        self.wk_btn.setStyleSheet(_translate("MainWindow", "background-color: rgb(255, 255, 255);\n"
"font: 75 14pt \"Times New Roman\";"))
        self.wk_btn.setText(_translate("MainWindow", "WK"))
        self.avail_points.setText(_translate("MainWindow", "Available Points : 1000"))
        self.selected_lbl.setText(_translate("MainWindow", "Selected Players"))
        self.team_lbl.setText(_translate("MainWindow", "Team : "))
        self.used_points.setText(_translate("MainWindow", "Points used : "))
        self.menuFile.setTitle(_translate("MainWindow", "Manage Teams"))
        self.team_new.setText(_translate("MainWindow", "NEW Team"))
        self.team_open.setText(_translate("MainWindow", "OPEN Team"))
        self.team_save.setText(_translate("MainWindow", "SAVE Team"))
        self.actionQuit.setText(_translate("MainWindow", "Quit Team"))
        self.team_evaluate.setText(_translate("MainWindow", "EVALUATE Team"))

    def showstatus(self):
                self.batsman_cnt.setText(str(self.bat))
                self.bowler_cnt.setText(str(self.bwl))
                self.all_cnt.setText(str(self.ar))
                self.wk_cnt.setText(str(self.wk))
                self.avail_points.setText("Available Points : {}".format(self.avl))
                self.used_points.setText("Points used : {}".format(self.used))

    def showlist(self):
                
                if self.team_lbl.text()=='Team Name':
                        self.showdialog("Enter name of team ")
                        return
                if self.bat_btn.isChecked()==True:
                        
                        sql = "SELECT player FROM stats WHERE ctg='BAT';"
                        try:
                                self.players_list.clear()
                                cursordb.execute(sql)
                                for record in cursordb:
                                        players_selected = []
                                        for i in range(self.selected_list.count()):
                                                players_selected.append(self.selected_list.item(i).text())
                               
                                        if record[0] not in players_selected:

                                                self.players_list.addItem(record[0])
                        except:
                                self.showdialog("Error in fetching Player Names.")
                if self.bowl_btn.isChecked() == True:
                        self.players_list.clear()
                        sql = "SELECT player FROM stats WHERE ctg='BWL';"
                        try:
                                self.players_list.clear()
                                cursordb.execute(sql)
                                for record in cursordb:
                                        players_selected = []
                                        for i in range(self.selected_list.count()):
                                                players_selected.append(
                                                        self.selected_list.item(i).text())

                                        if record[0] not in players_selected:
                                                self.players_list.addItem(record[0])
                        except:
                                self.showdialog("Error in fetching Player Names.")
                if self.all_btn.isChecked() == True:
                        self.players_list.clear()
                        sql = "SELECT player FROM stats WHERE ctg='AR';"
                        try:
                                self.players_list.clear()
                                cursordb.execute(sql)
                                for record in cursordb:
                                        players_selected = []
                                        for i in range(self.selected_list.count()):
                                                players_selected.append(
                                                        self.selected_list.item(i).text())

                                        if record[0] not in players_selected:
                                                self.players_list.addItem(record[0])
                        except:
                                self.showdialog("Error in fetching Player Names.")
                if self.wk_btn.isChecked() == True:
                        self.players_list.clear()
                        sql = "SELECT player FROM stats WHERE ctg='WK';"
                        try:
                                self.players_list.clear()
                                cursordb.execute(sql)
                                for record in cursordb:
                                        players_selected = []
                                        for i in range(self.selected_list.count()):
                                                players_selected.append(
                                                        self.selected_list.item(i).text())

                                        if record[0] not in players_selected:
                                                self.players_list.addItem(record[0])
                        except:
                                self.showdialog("Error in fetching Player Names.")
    def showdialog(self, msg):
                Dialog = QtWidgets.QMessageBox()
                Dialog.setIcon(QtWidgets.QMessageBox.Information)
                Dialog.setText(msg)
                Dialog.setWindowTitle("Fantasy Cricket Game")
                ret = Dialog.exec()

    def game_criteria(self, ctgr, item):
                
                msg = ''
                if ctgr == "BAT" and self.bat >= 5:
                        msg = "Batsmen not more than 5"
                elif ctgr == "BWL" and self.bwl >= 5:
                        msg = "bowlers not more than 5"
                elif ctgr == "AR" and self.ar >= 3:
                        msg = "Allrounders not more than 3"
                elif ctgr == "WK" and self.wk >= 1:
                        msg = "Wicketkeepers not more than 1"
                
                if msg!= '':
                        self.showdialog(msg)
                        return False
                if ctgr == "BAT":
                        self.bat += 1
                if ctgr == "BWL":
                        self.bwl += 1
                if ctgr == "AR":
                        self.ar += 1
                if ctgr == "WK":
                        self.wk += 1
                cursordb = db.execute("SELECT player,value from stats where player='"+item.text()+"'")
                row = cursordb.fetchone()
                self.avlbuffer=self.avl
                self.avl = self.avl-int(row[1])
                if self.avl < 0:
                        msg = 'You cannnot add more players.\nYou have exhausted your points'
                        self.showdialog(msg)
                        self.avl=self.avlbuffer
                        return False
                self.used = self.used+int(row[1])
                return True

    def OPEN_team(self):
                sql="SELECT name from teams"
                cursor = cursordb.execute(sql)
                teams = []
                for records in cursor:
                        teams.append(records[0])
                team_name, ok = QtWidgets.QInputDialog.getItem(MainWindow, "Fantasy Cricket Game","Choose a team", teams, 0, False)
                if ok and team_name: self.team_lbl.setText(team_name)
                sql1 = "SELECT players, value from teams where name='"+team_name+"';"
                cursordb.execute(sql1)
                records = cursordb.fetchone()
                players = records[0].split(',')
                self.selected_list.addItems(players)
                self.used = records[1]
                self.avl = 1000 - records[1]
                playerNo = self.selected_list.count()
                for i in range(playerNo):
                        player = self.selected_list.item(i).text()
                        sql = "SELECT ctg from stats where player='"+player+"';"
                        cursordb.execute(sql)
                        records = cursordb.fetchone()
                        ctgr = records[0]
                        if ctgr == "BAT":
                                self.bat += 1
                        if ctgr == "BWL":
                                self.bwl += 1
                        if ctgr == "AR":
                                self.ar += 1
                        if ctgr == "WK":
                                self.wk += 1
                self.showstatus()
      
    def menufunction(self, action):
                txt = (action.text())
                if txt == 'NEW Team':
                        self.bat = 0
                        self.bwl = 0
                        self.ar = 0
                        self.wk = 0
                        self.avl = 1000
                        self.used = 0
                        self.players_list.clear()
                        self.selected_list.clear()
                        self.showstatus()
                        self.team_lbl.setText("Team Name")
                        text,ok= QtWidgets.QInputDialog.getText(MainWindow, 'Fantasy Cricket Game', 'Enter name of Team:')
                        if ok :
                                self.team_lbl.setText(str(text))
                if txt == "OPEN Team":
                        self.bat = 0
                        self.bwl = 0
                        self.ar = 0
                        self.wk = 0
                        self.avl = 1000
                        self.used = 0
                        self.players_list.clear()
                        self.selected_list.clear()
                        self.team_lbl.setText("Team_name")
                        self.showstatus()
                        self.OPEN_team()
                if txt == 'SAVE Team':
                        selected = ""
                        cnt = self.selected_list.count()
                        for i in range(cnt):
                                selected = selected+self.selected_list.item(i).text()
                                if i < cnt-1:
                                        selected = selected+","
                        self.SAVE_Team(self.team_lbl.text(), selected, self.used)
                if txt == "EVALUATE Team":
                        from teams import Ui_Dialog
                        Evaluate = QtWidgets.QDialog()
                        ui = Ui_Dialog()
                        ui.setupUi(Evaluate)
                        ret = Evaluate.exec()

    def SAVE_Team(self,nm,string,val):
                if self.bat+self.bwl+self.ar+self.wk!=11:
                        self.showdialog("Insufficient players")
                        return
                sql="SELECT name FROM teams;"
                try:
                        cursordb.execute(sql)
                except:
                        self.showdialog("Error while fetching teams names.")
                        while true:
                                record=cursordb.fetchone()
                                if record == None:
                                        break
                                if nm in record:
                                        msg ="This team already exist!\nPick another team name."
                                        self.showdialog(msg)
                                        return
                        
                else:
                         sql="INSERT INTO teams (name, players, value) VALUES ('"+nm+"','"+string+"','"+str(val)+"');"
                         try:
                                cursordb.execute(sql)
                                db.commit()
                                self.showdialog("Team Saved successfully")
                         except:
                                self.showdialog("Error in saving teams.")
                                db.rollback()

    def removeplayers_list(self, item):
                ctgr = ''
                if self.bat_btn.isChecked() == True:
                        ctgr = 'BAT'
                if self.bowl_btn.isChecked() == True:
                        ctgr = 'BWL'
                if self.all_btn.isChecked() == True:
                        ctgr = 'AR'
                if self.wk_btn.isChecked() == True:
                        ctgr = 'WK'
                ret = self.game_criteria(ctgr, item)
                if ret == True:
                        self.players_list.takeItem(self.players_list.row(item))
                        self.selected_list.addItem(item.text())
                        self.showstatus()

    def remove_criteria(self , ctgr,item):
                players_notselected = []
                if ctgr == "BAT":
                        self.bat -= 1
                        self.bat_btn.setChecked(True)

                        for i in range(self.players_list.count()):
                                players_notselected.append(self.players_list.item(i).text())
                        if item.text() not in players_notselected:
                                self.players_list.addItem(item.text())
                if ctgr == "BWL":
                        self.bwl -= 1
                        self.bowl_btn.setChecked(True)
                        for i in range(self.players_list.count()):
                                players_notselected.append(self.players_list.item(i).text())
                        if item.text() not in players_notselected:
                                self.players_list.addItem(item.text())
                if ctgr == "AR":
                        self.ar -= 1
                        self.all_btn.setChecked(True)
                        for i in range(self.players_list.count()):
                                players_notselected.append(self.players_list.item(i).text())
                        if item.text() not in players_notselected:
                                self.players_list.addItem(item.text())
                if ctgr == "WK":
                        self.wk -= 1
                        self.wk_btn.setChecked(True) 
                        for i in range(self.players_list.count()):
                                players_notselected.append(self.players_list.item(i).text())
                        if item.text() not in players_notselected:
                                self.players_list.addItem(item.text())
                if self.used == 0:
                        self.bat = self.bwl = self.ar = self.wk = 0
                        self.avl = 1000
                return True

    def removeselected_list(self, item):
                cursordb = ''
                self.selected_list.takeItem(self.selected_list.row(item))
                try:
                        cursordb = db.execute("SELECT player,value, ctg from stats where player='"+item.text()+"'")
                except:
                        self.showdialog("Error while fetching items from the Database.")
               
                row = cursordb.fetchone()
                self.avl += int(row[1])
                self.used -= int(row[1])
                ctgr = row[2]
                ret = self.remove_criteria(ctgr,item)
                if ret == True:
                        self.showstatus()

if __name__ == "__main__":
    import sys,sqlite3
    db = sqlite3.connect("project.db")
    cursordb = db.cursor()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())